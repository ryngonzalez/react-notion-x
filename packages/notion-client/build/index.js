import z from"got";import{getBlockCollectionId as Q,getPageContentBlockIds as S,parsePageId as M,uuidToId as H}from"notion-utils";import Y from"p-map";var $=class{constructor({apiBaseUrl:r="https://www.notion.so/api/v3",authToken:n,activeUser:e,userTimeZone:o="America/New_York"}={}){this._apiBaseUrl=r,this._authToken=n,this._activeUser=e,this._userTimeZone=o}async getPage(r,{concurrency:n=3,fetchMissingBlocks:e=!0,fetchCollections:o=!0,signFileUrls:a=!0,chunkLimit:s=100,chunkNumber:_=0,gotOptions:l}={}){let g=await this.getPageRaw(r,{chunkLimit:s,chunkNumber:_,gotOptions:l}),t=g==null?void 0:g.recordMap;if(!(t!=null&&t.block))throw new Error(`Notion page not found "${H(r)}"`);if(t.collection=t.collection??{},t.collection_view=t.collection_view??{},t.notion_user=t.notion_user??{},t.collection_query={},t.signed_urls={},e)for(;;){let c=S(t).filter(i=>!t.block[i]);if(!c.length)break;let d=await this.getBlocks(c,l).then(i=>i.recordMap.block);t.block={...t.block,...d}}let y=S(t);if(o){let c=y.flatMap(d=>{var m;let i=t.block[d].value,f=i&&(i.type==="collection_view"||i.type==="collection_view_page")&&Q(i,t);return f?(m=i.view_ids)==null?void 0:m.map(b=>({collectionId:f,collectionViewId:b})):[]});await Y(c,async d=>{var b,k;let{collectionId:i,collectionViewId:f}=d,m=(b=t.collection_view[f])==null?void 0:b.value;try{let p=await this.getCollectionData(i,f,m,{gotOptions:l});t.block={...t.block,...p.recordMap.block},t.collection={...t.collection,...p.recordMap.collection},t.collection_view={...t.collection_view,...p.recordMap.collection_view},t.notion_user={...t.notion_user,...p.recordMap.notion_user},t.collection_query[i]={...t.collection_query[i],[f]:(k=p.result)==null?void 0:k.reducerResults}}catch(p){console.warn("NotionAPI collectionQuery error",r,p.message),console.error(p)}},{concurrency:n})}return a&&(console.log("Adding Signed URLs"),await this.addSignedUrls({recordMap:t,contentBlockIds:y,gotOptions:l})),console.log("pageId: ",r),r=="51f8f030-4d21-48ac-b1b5-6da04599380c"&&(console.log("HELLLLLOOOOOOOOOOOOOO"),console.log(r,y.length,t.signed_urls.length)),t}async addSignedUrls({recordMap:r,contentBlockIds:n,gotOptions:e={}}){r.signed_urls={},n||(n=S(r));let o=n.flatMap(a=>{var _,l,g,t,y,c;let s=(_=r.block[a])==null?void 0:_.value;if(s&&(s.type==="pdf"||s.type==="audio"||s.type==="image"&&((l=s.file_ids)==null?void 0:l.length)||s.type==="video"||s.type==="file"||s.type==="page")){let d=s.type==="page"?(g=s.format)==null?void 0:g.page_cover:(c=(y=(t=s.properties)==null?void 0:t.source)==null?void 0:y[0])==null?void 0:c[0];if(console.log(s,d),d)return{permissionRecord:{table:"block",id:s.id},url:d}}return[]});if(console.log(`
 File Instances: `,o),o.length>0)try{let{signedUrls:a}=await this.getSignedFileUrls(o,e);if(a.length===o.length)for(let s=0;s<o.length;++s){let _=o[s],l=a[s];r.signed_urls[_.permissionRecord.id]=l}}catch(a){console.warn("NotionAPI getSignedfileUrls error",a)}}async getPageRaw(r,{gotOptions:n,chunkLimit:e=100,chunkNumber:o=0}={}){let a=M(r);if(!a)throw new Error(`invalid notion pageId "${r}"`);let s={pageId:a,limit:e,chunkNumber:o,cursor:{stack:[]},verticalColumns:!1};return this.fetch({endpoint:"loadPageChunk",body:s,gotOptions:n})}async getCollectionData(r,n,e,{limit:o=9999,searchQuery:a="",userTimeZone:s=this._userTimeZone,loadContentCover:_=!0,gotOptions:l}={}){var i,f,m,b,k,p,q,T,N,C,I,P;let g=e==null?void 0:e.type,t=g==="board",y=t?(i=e==null?void 0:e.format)==null?void 0:i.board_columns_by:(f=e==null?void 0:e.format)==null?void 0:f.collection_group_by,c=[];(m=e==null?void 0:e.format)!=null&&m.property_filters&&(c=(b=e.format)==null?void 0:b.property_filters.map(h=>{var v,B;return{filter:(v=h==null?void 0:h.filter)==null?void 0:v.filter,property:(B=h==null?void 0:h.filter)==null?void 0:B.property}})),(p=(k=e==null?void 0:e.query2)==null?void 0:k.filter)!=null&&p.filters&&c.push(...e.query2.filter.filters);let d={type:"reducer",reducers:{collection_group_results:{type:"results",limit:o,loadContentCover:_}},sort:[],...e==null?void 0:e.query2,filter:{filters:c,operator:"and"},searchQuery:a,userTimeZone:s};if(y){let h=((q=e==null?void 0:e.format)==null?void 0:q.board_columns)||((T=e==null?void 0:e.format)==null?void 0:T.collection_groups)||[],v=[t?"board":"group_aggregation","results"],B={checkbox:"checkbox_is",url:"string_starts_with",text:"string_starts_with",select:"enum_is",multi_select:"enum_contains",created_time:"date_is_within",undefined:"is_empty"},x={};for(let O of h){let{property:F,value:{value:u,type:L}}=O;for(let U of v){let A=U==="results"?{type:U,limit:o}:{type:"aggregation",aggregation:{aggregator:"count"}},R=typeof u>"u",J=u==null?void 0:u.range,D=R?"uncategorized":J?((N=u.range)==null?void 0:N.start_date)||((C=u.range)==null?void 0:C.end_date):(u==null?void 0:u.value)||u,Z=!R&&(J||(u==null?void 0:u.value)||u);x[`${U}:${L}:${D}`]={...A,filter:{operator:"and",filters:[{property:F,filter:{operator:R?"is_empty":B[L],...!R&&{value:{type:"exact",value:Z}}}}]}}}}let E=t?"board_columns":`${g}_groups`;d={type:"reducer",reducers:{[E]:{type:"groups",groupBy:y,...((I=e==null?void 0:e.query2)==null?void 0:I.filter)&&{filter:(P=e==null?void 0:e.query2)==null?void 0:P.filter},groupSortPreference:h.map(O=>O==null?void 0:O.value),limit:o},...x},...e==null?void 0:e.query2,searchQuery:a,userTimeZone:s,filter:{filters:c,operator:"and"}}}return this.fetch({endpoint:"queryCollection",body:{collection:{id:r},collectionView:{id:n},loader:d},gotOptions:l})}async getUsers(r,n){return this.fetch({endpoint:"getRecordValues",body:{requests:r.map(e=>({id:e,table:"notion_user"}))},gotOptions:n})}async getBlocks(r,n){return this.fetch({endpoint:"syncRecordValues",body:{requests:r.map(e=>({table:"block",id:e,version:-1}))},gotOptions:n})}async getSignedFileUrls(r,n){return this.fetch({endpoint:"getSignedFileUrls",body:{urls:r},gotOptions:n})}async search(r,n){let e={type:"BlocksInAncestor",source:"quick_find_public",ancestorId:M(r.ancestorId),sort:{field:"relevance"},limit:r.limit||20,query:r.query,filters:{isDeletedOnly:!1,isNavigableOnly:!1,excludeTemplates:!0,requireEditPermissions:!1,ancestors:[],createdBy:[],editedBy:[],lastEditedTime:{},createdTime:{},...r.filters}};return this.fetch({endpoint:"search",body:e,gotOptions:n})}async fetch({endpoint:r,body:n,gotOptions:e,headers:o}){let a={...o,...e==null?void 0:e.headers,"Content-Type":"application/json"};this._authToken&&(a.cookie=`token_v2=${this._authToken}`),this._activeUser&&(a["x-notion-active-user-header"]=this._activeUser);let s=`${this._apiBaseUrl}/${r}`;return z.post(s,{...e,json:n,headers:a}).json()}};export{$ as NotionAPI};
//# sourceMappingURL=index.js.map